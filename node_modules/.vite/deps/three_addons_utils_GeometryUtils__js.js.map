{
  "version": 3,
  "sources": ["../../three/examples/jsm/utils/GeometryUtils.js"],
  "sourcesContent": ["import { Vector3 } from 'three';\r\n\r\n\r\n/**\r\n * Generates 2D-Coordinates in a very fast way.\r\n *\r\n * Based on work by:\r\n * @link http://www.openprocessing.org/sketch/15493\r\n *\r\n * @param center     Center of Hilbert curve.\r\n * @param size       Total width of Hilbert curve.\r\n * @param iterations Number of subdivisions.\r\n * @param v0         Corner index -X, -Z.\r\n * @param v1         Corner index -X, +Z.\r\n * @param v2         Corner index +X, +Z.\r\n * @param v3         Corner index +X, -Z.\r\n */\r\nfunction hilbert2D( center = new Vector3( 0, 0, 0 ), size = 10, iterations = 1, v0 = 0, v1 = 1, v2 = 2, v3 = 3 ) {\r\n\r\n\tconst half = size / 2;\r\n\r\n\tconst vec_s = [\r\n\t\tnew Vector3( center.x - half, center.y, center.z - half ),\r\n\t\tnew Vector3( center.x - half, center.y, center.z + half ),\r\n\t\tnew Vector3( center.x + half, center.y, center.z + half ),\r\n\t\tnew Vector3( center.x + half, center.y, center.z - half )\r\n\t];\r\n\r\n\tconst vec = [\r\n\t\tvec_s[ v0 ],\r\n\t\tvec_s[ v1 ],\r\n\t\tvec_s[ v2 ],\r\n\t\tvec_s[ v3 ]\r\n\t];\r\n\r\n\t// Recurse iterations\r\n\tif ( 0 <= -- iterations ) {\r\n\r\n\t\treturn [\r\n\t\t\t...hilbert2D( vec[ 0 ], half, iterations, v0, v3, v2, v1 ),\r\n\t\t\t...hilbert2D( vec[ 1 ], half, iterations, v0, v1, v2, v3 ),\r\n\t\t\t...hilbert2D( vec[ 2 ], half, iterations, v0, v1, v2, v3 ),\r\n\t\t\t...hilbert2D( vec[ 3 ], half, iterations, v2, v1, v0, v3 )\r\n\t\t];\r\n\r\n\t}\r\n\r\n\t// Return complete Hilbert Curve.\r\n\treturn vec;\r\n\r\n}\r\n\r\n/**\r\n * Generates 3D-Coordinates in a very fast way.\r\n *\r\n * Based on work by:\r\n * @link https://openprocessing.org/user/5654\r\n *\r\n * @param center     Center of Hilbert curve.\r\n * @param size       Total width of Hilbert curve.\r\n * @param iterations Number of subdivisions.\r\n * @param v0         Corner index -X, +Y, -Z.\r\n * @param v1         Corner index -X, +Y, +Z.\r\n * @param v2         Corner index -X, -Y, +Z.\r\n * @param v3         Corner index -X, -Y, -Z.\r\n * @param v4         Corner index +X, -Y, -Z.\r\n * @param v5         Corner index +X, -Y, +Z.\r\n * @param v6         Corner index +X, +Y, +Z.\r\n * @param v7         Corner index +X, +Y, -Z.\r\n */\r\nfunction hilbert3D( center = new Vector3( 0, 0, 0 ), size = 10, iterations = 1, v0 = 0, v1 = 1, v2 = 2, v3 = 3, v4 = 4, v5 = 5, v6 = 6, v7 = 7 ) {\r\n\r\n\t// Default Vars\r\n\tconst half = size / 2;\r\n\r\n\tconst vec_s = [\r\n\t\tnew Vector3( center.x - half, center.y + half, center.z - half ),\r\n\t\tnew Vector3( center.x - half, center.y + half, center.z + half ),\r\n\t\tnew Vector3( center.x - half, center.y - half, center.z + half ),\r\n\t\tnew Vector3( center.x - half, center.y - half, center.z - half ),\r\n\t\tnew Vector3( center.x + half, center.y - half, center.z - half ),\r\n\t\tnew Vector3( center.x + half, center.y - half, center.z + half ),\r\n\t\tnew Vector3( center.x + half, center.y + half, center.z + half ),\r\n\t\tnew Vector3( center.x + half, center.y + half, center.z - half )\r\n\t];\r\n\r\n\tconst vec = [\r\n\t\tvec_s[ v0 ],\r\n\t\tvec_s[ v1 ],\r\n\t\tvec_s[ v2 ],\r\n\t\tvec_s[ v3 ],\r\n\t\tvec_s[ v4 ],\r\n\t\tvec_s[ v5 ],\r\n\t\tvec_s[ v6 ],\r\n\t\tvec_s[ v7 ]\r\n\t];\r\n\r\n\t// Recurse iterations\r\n\tif ( -- iterations >= 0 ) {\r\n\r\n\t\treturn [\r\n\t\t\t...hilbert3D( vec[ 0 ], half, iterations, v0, v3, v4, v7, v6, v5, v2, v1 ),\r\n\t\t\t...hilbert3D( vec[ 1 ], half, iterations, v0, v7, v6, v1, v2, v5, v4, v3 ),\r\n\t\t\t...hilbert3D( vec[ 2 ], half, iterations, v0, v7, v6, v1, v2, v5, v4, v3 ),\r\n\t\t\t...hilbert3D( vec[ 3 ], half, iterations, v2, v3, v0, v1, v6, v7, v4, v5 ),\r\n\t\t\t...hilbert3D( vec[ 4 ], half, iterations, v2, v3, v0, v1, v6, v7, v4, v5 ),\r\n\t\t\t...hilbert3D( vec[ 5 ], half, iterations, v4, v3, v2, v5, v6, v1, v0, v7 ),\r\n\t\t\t...hilbert3D( vec[ 6 ], half, iterations, v4, v3, v2, v5, v6, v1, v0, v7 ),\r\n\t\t\t...hilbert3D( vec[ 7 ], half, iterations, v6, v5, v2, v1, v0, v3, v4, v7 )\r\n\t\t];\r\n\r\n\t}\r\n\r\n\t// Return complete Hilbert Curve.\r\n\treturn vec;\r\n\r\n}\r\n\r\n/**\r\n * Generates a Gosper curve (lying in the XY plane)\r\n *\r\n * https://gist.github.com/nitaku/6521802\r\n *\r\n * @param size The size of a single gosper island.\r\n */\r\nfunction gosper( size = 1 ) {\r\n\r\n\tfunction fractalize( config ) {\r\n\r\n\t\tlet output;\r\n\t\tlet input = config.axiom;\r\n\r\n\t\tfor ( let i = 0, il = config.steps; 0 <= il ? i < il : i > il; 0 <= il ? i ++ : i -- ) {\r\n\r\n\t\t\toutput = '';\r\n\r\n\t\t\tfor ( let j = 0, jl = input.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tconst char = input[ j ];\r\n\r\n\t\t\t\tif ( char in config.rules ) {\r\n\r\n\t\t\t\t\toutput += config.rules[ char ];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\toutput += char;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tinput = output;\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n\tfunction toPoints( config ) {\r\n\r\n\t\tlet currX = 0, currY = 0;\r\n\t\tlet angle = 0;\r\n\t\tconst path = [ 0, 0, 0 ];\r\n\t\tconst fractal = config.fractal;\r\n\r\n\t\tfor ( let i = 0, l = fractal.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst char = fractal[ i ];\r\n\r\n\t\t\tif ( char === '+' ) {\r\n\r\n\t\t\t\tangle += config.angle;\r\n\r\n\t\t\t} else if ( char === '-' ) {\r\n\r\n\t\t\t\tangle -= config.angle;\r\n\r\n\t\t\t} else if ( char === 'F' ) {\r\n\r\n\t\t\t\tcurrX += config.size * Math.cos( angle );\r\n\t\t\t\tcurrY += - config.size * Math.sin( angle );\r\n\t\t\t\tpath.push( currX, currY, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tconst gosper = fractalize( {\r\n\t\taxiom: 'A',\r\n\t\tsteps: 4,\r\n\t\trules: {\r\n\t\t\tA: 'A+BF++BF-FA--FAFA-BF+',\r\n\t\t\tB: '-FA+BFBF++BF+FA--FA-B'\r\n\t\t}\r\n\t} );\r\n\r\n\tconst points = toPoints( {\r\n\t\tfractal: gosper,\r\n\t\tsize: size,\r\n\t\tangle: Math.PI / 3 // 60 degrees\r\n\t} );\r\n\r\n\treturn points;\r\n\r\n}\r\n\r\n\r\n\r\nexport {\r\n\thilbert2D,\r\n\thilbert3D,\r\n\tgosper,\r\n};\r\n"],
  "mappings": "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",
  "names": ["gosper"]
}
